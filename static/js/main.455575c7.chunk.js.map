{"version":3,"sources":["App.js","components/Display.js","index.js","components/Button.js"],"names":["App","initialState","display","record","limit","operators","useReducer","reducer","state","dispatch","action","updatedDisplay","len","length","type","charAt","includes","substring","i","slice","console","log","appendDecimal","lastOperatorPos","operator","symPos","lastIndexOf","currentNumber","Math","round","eval","replace","e","updatedRecord","toString","Error","id","content","className","icon","faFreeCodeCamp","map","element","index","Display","props","ReactDOM","render","StrictMode","document","getElementById","Button","onClick"],"mappings":"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","file":"static/js/main.455575c7.chunk.js","sourcesContent":["import React, { useReducer } from \"react\";\nimport \"./index.css\";\nimport Display from \"./components/Display.js\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFreeCodeCamp } from \"@fortawesome/free-brands-svg-icons\";\nimport Button from \"./components/Button\";\n\nfunction App() {\n  const initialState = {\n    display: \"0\",\n    record: [],\n  };\n  const limit = 16;\n  const operators = [\"+\", \"-\", \"*\", \"/\"];\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  function reducer(state, action) {\n    const { display, record } = state;\n    let updatedDisplay = display;\n    let len = display.length;\n\n    switch (action.type) {\n      case \"clear\":\n        return { ...state, display: initialState.display };\n      case \"0\":\n      case \"1\":\n      case \"2\":\n      case \"3\":\n      case \"4\":\n      case \"5\":\n      case \"6\":\n      case \"7\":\n      case \"8\":\n      case \"9\":\n        if (len >= limit) return state;\n        if (\n          display === \"0\" ||\n          display === \"Error!\" ||\n          display === \"NaN\" ||\n          display === \"Infinity\"\n        ) {\n          updatedDisplay = action.type;\n        } else if (\n          display.charAt(len - 1) === \"0\" &&\n          operators.includes(display.charAt(len - 2))\n        ) {\n          updatedDisplay = display.substring(0, len - 1) + action.type;\n        } else {\n          updatedDisplay = display + action.type;\n        }\n        break;\n      case \"+\":\n      case \"-\":\n      case \"*\":\n      case \"/\":\n        if (len >= limit) return state;\n        if (action.type === \"-\") {\n          //if symbol is '-' append the new operator ('-')\n          //check to see if the last 2 digits are operators in which case  do not add any more minus signs\n          if (\n            !operators.includes(display[len - 1]) ||\n            !operators.includes(display[len - 2])\n          ) {\n            updatedDisplay = display + action.type;\n          }\n        } else if (!operators.includes(display[len - 1])) {\n          //else if lastChar is not a operator then append the new operator\n          updatedDisplay = display + action.type;\n        } else {\n          //loop through from the end of the string removing any operators before adding the new operator\n          for (let i = len - 1; i >= 0; i--) {\n            if (operators.includes(display[i])) {\n              updatedDisplay = updatedDisplay.slice(0, -1);\n              console.log(updatedDisplay);\n            } else break;\n          }\n          updatedDisplay = updatedDisplay + action.type;\n        }\n\n        break;\n      case \".\":\n        let appendDecimal = true; //set to true but check if the currentNumber already has a decimal and if so set to false\n        let lastOperatorPos = -1;\n        for (let operator of operators) {\n          let symPos = display.lastIndexOf(operator);\n          if (symPos > lastOperatorPos) lastOperatorPos = symPos;\n        }\n        let currentNumber = display;\n        if (lastOperatorPos !== -1)\n          currentNumber = display.slice(lastOperatorPos + 1);\n        if (currentNumber.includes(\".\")) appendDecimal = false;\n        if (len >= limit) return state;\n        if (appendDecimal) updatedDisplay = display + \".\";\n        break;\n      case \"=\":\n        try {\n          updatedDisplay =\n            Math.round(eval(updatedDisplay.replace(\"--\", \"- -\")) * 100000) /\n            100000;\n        } catch (e) {\n          updatedDisplay = \"Error!\";\n        }\n        let updatedRecord = [display + \" = \" + updatedDisplay];\n        return {\n          record: [updatedRecord, ...record],\n          display: updatedDisplay.toString(),\n        };\n      default:\n        throw new Error();\n    }\n    return { ...state, display: updatedDisplay };\n  }\n\n  return (\n    <>\n      <div id=\"calculator\">\n        <Display content={state.display} />\n        <div id=\"button-container\">\n          <Button id=\"seven\" type=\"7\" dispatch={dispatch} />\n          <Button id=\"eight\" type=\"8\" dispatch={dispatch} />\n          <Button id=\"nine\" type=\"9\" dispatch={dispatch} />\n          <Button id=\"add\" type=\"+\" dispatch={dispatch} />\n          <Button id=\"clear\" type=\"clear\" content=\"C\" dispatch={dispatch} />\n          <Button id=\"four\" type=\"4\" dispatch={dispatch} />\n          <Button id=\"five\" type=\"5\" dispatch={dispatch} />\n          <Button id=\"six\" type=\"6\" dispatch={dispatch} />\n          <Button id=\"subtract\" type=\"-\" dispatch={dispatch} />\n          <Button id=\"one\" type=\"1\" dispatch={dispatch} />\n          <Button id=\"two\" type=\"2\" dispatch={dispatch} />\n          <Button id=\"three\" type=\"3\" dispatch={dispatch} />\n          <Button id=\"multiply\" type=\"*\" dispatch={dispatch} />\n          <Button id=\"equals\" type=\"=\" dispatch={dispatch} />\n          <Button id=\"zero\" type=\"0\" dispatch={dispatch} />\n          <Button id=\"decimal\" type=\".\" dispatch={dispatch} />\n          <div className=\"blank\">\n            <FontAwesomeIcon icon={faFreeCodeCamp} />\n          </div>\n          <Button id=\"divide\" type=\"/\" dispatch={dispatch} />\n        </div>\n      </div>\n      <div id=\"results\">\n        <ul>\n          {state.record.map((element, index) => (\n            <li key={index}>{element}</li>\n          ))}\n        </ul>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","\nfunction Display(props) {\n\n  return (\n    <div id=\"display\">{props.content}</div>\n  );\n\n}\n\nexport default Display;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","function Button({ id, type, dispatch, content }) {\n  if (!content) content = type;\n  return (\n    <div className=\"button\" id={id} onClick={() => dispatch({ type: type })}>\n      {content}\n    </div>\n  );\n}\n\nexport default Button;\n"],"sourceRoot":""}